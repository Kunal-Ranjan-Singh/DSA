class Solution {
  public:
    // Function to count inversions in the array.
    int merge(vector<int>& arr, int low, int mid, int high){
        vector<int> temp;
        int left = low;
        int right = mid + 1;
        int count = 0;
        while(left <= mid && right <= high){
            if(arr[left] <= arr[right]){
                temp.push_back(arr[left]);
                left++;
            }
            else{
                temp.push_back(arr[right]);
                count = count + (mid - left + 1);
                right++;
            }
        }
        
        while(left <= mid){
            temp.push_back(arr[left]);
            left++;
        }
        
        while(right <= high){
            temp.push_back(arr[right]);
            right++;
        }
        
        for(int i = 0; i < temp.size(); i++){
            arr[low + i] = temp[i];
        }
        
        return count;
    }
    
    int mergeSort(vector<int>& arr, int low, int high){
        int count = 0;
        if(low >= high) return count;
        int mid = (low + high) / 2;
        count += mergeSort(arr, low, mid);
        count += mergeSort(arr, mid + 1, high);
        count += merge(arr, low, mid, high);
        
        return count;
    }
    
    int inversionCount(vector<int> &arr) {
        // Your Code Here
        int n = arr.size();
        int count = mergeSort(arr, 0, n - 1);
        
        return count;
    }
};
